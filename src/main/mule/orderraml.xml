<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns="http://www.mulesoft.org/schema/mule/core"
    xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
    xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd 
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
        http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd
        http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">

    <http:listener-config name="orderraml-httpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="8081"/>
    </http:listener-config>

    <apikit:config name="orderraml-config"
                   api="orderraml.raml"
                   outboundHeadersMapName="outboundHeaders"
                   httpStatusVarName="httpStatus"/>
                   
    <db:config name="DatabaseConfig" doc:name="Database Config">
        <db:my-sql-connection host="localhost" port="3306" user="root" password="Nspnsp@25" database="mule_db" />
    </db:config>

    <flow name="orderraml-main">
        <http:listener config-ref="orderraml-httpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>

        <apikit:router config-ref="orderraml-config"/>

        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform doc:name="Transform Bad Request">
                
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>

            </on-error-propagate>

            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Not Found">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


            </on-error-propagate>

            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform doc:name="Transform Method Not Allowed">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>

            </on-error-propagate>

            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform doc:name="Transform Not Acceptable">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


            </on-error-propagate>

            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform doc:name="Transform Unsupported Media Type">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


            </on-error-propagate>

            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform doc:name="Transform Not Implemented">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


            </on-error-propagate>
        </error-handler>
    </flow>

    <flow name="post:\createorders:application\json:orderraml-config">
        <http:request method="POST" url="http://localhost:8080/internal/orders">
            <http:headers><![CDATA[#[output application/java
---
{
  "Content-Type": "application/json"
}]]]></http:headers>
        </http:request>

        <set-variable variableName="httpStatus" value="#[attributes.statusCode]"/>
        <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>
    </flow>

    <flow name="get:\getorders:orderraml-config">
        <ee:transform doc:name="Transform Get Orders">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
[
  {
    orderId: 1,
    customer: "Alice",
    item: "Tablet",
    status: "processing"
  }
] as Array {encoding: "UTF-8", mediaType: "application/json"}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


    </flow>

    <flow name="orderraml-console">
        <http:listener config-ref="orderraml-httpListenerConfig" path="/api/getorders">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>

        <http:request method="GET" url="http://localhost:8080/internal/orders" />

        <ee:transform doc:name="Transform Response">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
            </ee:message>
            <ee:variables>
                <ee:set-variable variableName="httpStatus">200</ee:set-variable>
            </ee:variables>
        </ee:transform>

        <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>



        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform doc:name="Transform Message">
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
                <db:insert doc:name="Log Error to DB" config-ref="DatabaseConfig" target="logInsertResult">
    <db:sql><![CDATA[
        INSERT INTO request_log (request_payload, response_status)
        VALUES (:request_payload, :response_status)
    ]]></db:sql>
    <db:input-parameters><![CDATA[#[{
        request_payload: write(payload, "application/json"),
        response_status: vars.httpStatus
    }]]]></db:input-parameters>
</db:insert>


            </on-error-propagate>
        </error-handler>
    </flow>

</mule>